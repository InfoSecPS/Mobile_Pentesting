import xml.etree.ElementTree as ET
import sys
from colorama import init, Fore, Style

# Initialize colorama
init(autoreset=True)

def parse_manifest(file_path):
    return ET.parse(file_path).getroot()

def check_debuggable(root):
    app = root.find("application")
    if app is not None and app.get("{http://schemas.android.com/apk/res/android}debuggable") == "true":
        return "Warning: debuggable is set to true. Information may be explosed in Logcat."
    return None

def check_allowbackup(root):
    app = root.find("application")
    if app is not None and app.get("{http://schemas.android.com/apk/res/android}allowBackup") == "true":
        return "Note: allowBackup is set to true. Consider using Android Backup Extractor."
    return None

def check_exported_components(root):
    issues = []
    for comp in root.findall(".//activity") + root.findall(".//service") + root.findall(".//receiver"):
        if comp.get("{http://schemas.android.com/apk/res/android}exported") == "true":
            name = comp.get("{http://schemas.android.com/apk/res/android}name")
            issues.append(f"Warning: {name} is exported. Manually check using ADB for data exposure or inputs.")
    return issues if issues else None

def check_permissions(root):
    dangerous_permissions = [
        "android.permission.READ_CALENDAR",
        "android.permission.WRITE_CALENDAR",
        "android.permission.CAMERA",
        "android.permission.READ_CONTACTS",
        "android.permission.WRITE_CONTACTS",
        "android.permission.GET_ACCOUNTS",
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_BACKGROUND_LOCATION",
        "android.permission.RECORD_AUDIO",
        "android.permission.READ_PHONE_STATE",
        "android.permission.READ_PHONE_NUMBERS",
        "android.permission.CALL_PHONE",
        "android.permission.ANSWER_PHONE_CALLS",
        "android.permission.READ_CALL_LOG",
        "android.permission.WRITE_CALL_LOG",
        "android.permission.ADD_VOICEMAIL",
        "android.permission.USE_SIP",
        "android.permission.PROCESS_OUTGOING_CALLS",
        "android.permission.BODY_SENSORS",
        "android.permission.SEND_SMS",
        "android.permission.RECEIVE_SMS",
        "android.permission.READ_SMS",
        "android.permission.RECEIVE_WAP_PUSH",
        "android.permission.RECEIVE_MMS",
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.WRITE_EXTERNAL_STORAGE",
        "android.permission.MANAGE_EXTERNAL_STORAGE",
        "android.permission.ACCESS_MEDIA_LOCATION",
        "android.permission.ACTIVITY_RECOGNITION",
        "android.permission.READ_MEDIA_IMAGES",
        "android.permission.READ_MEDIA_VIDEO",
        "android.permission.READ_MEDIA_AUDIO",
        "android.permission.NEARBY_WIFI_DEVICES",
        "android.permission.POST_NOTIFICATIONS",
        "android.permission.BLUETOOTH_SCAN",
        "android.permission.BLUETOOTH_CONNECT",
        "android.permission.BLUETOOTH_ADVERTISE",
        "android.permission.UWB_RANGING"
    ]
    issues = []
    for perm in root.findall("uses-permission"):
        if perm.get("{http://schemas.android.com/apk/res/android}name") in dangerous_permissions:
            issues.append(f"Note: Using potentially dangerous permission: {perm.get('{http://schemas.android.com/apk/res/android}name')}")
    return issues if issues else None

def check_cleartextTraffic(root):
    app = root.find("application")
    if app is not None and app.get("{http://schemas.android.com/apk/res/android}usesCleartextTraffic") == "true":
        return "Warning: cleartextTraffic is allowed. Check source code for references to insecure protocols."
    return None

def analyze_manifest(file_path):
    root = parse_manifest(file_path)
    checks = [
        ("Debuggable Check", check_debuggable),
        ("Backup Check", check_allowbackup),
        ("Exported Components Check", check_exported_components),
        ("Permissions Check", check_permissions),
        ("Cleartext Traffic Check", check_cleartextTraffic),
    ]
    
    issues = []
    for title, check in checks:
        print(f"\n{Fore.CYAN}{Style.BRIGHT}=== {title} ==={Style.RESET_ALL}")
        result = check(root)
        if result:
            if isinstance(result, list):
                issues.extend(result)
                for item in result:
                    print(f"{Fore.YELLOW}- {item}")
            else:
                issues.append(result)
                print(f"{Fore.YELLOW}- {result}")
        else:
            print(f"{Fore.GREEN}No issues found.")
    
    return issues

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"{Fore.RED}Usage: python script.py path_to_AndroidManifest.xml")
        sys.exit(1)
    
    manifest_path = sys.argv[1]
    issues = analyze_manifest(manifest_path)
    
    print(f"\n{Fore.CYAN}{Style.BRIGHT}=== Summary ==={Style.RESET_ALL}")
    if issues:
        print(f"{Fore.YELLOW}[{len(issues)}] potential issue(s) found.")
        print("   ")
        print(f"{Fore.YELLOW}[+] Please conduct a manual inspection to verify the results!")
        print("   ")
    else:
        print(f"{Fore.GREEN}No issues found.")
