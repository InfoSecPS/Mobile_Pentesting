Java.perform(function() {
    var SQLiteDatabase = Java.use('android.database.sqlite.SQLiteDatabase');

    // Monitor database writes
    SQLiteDatabase.insert.overload('java.lang.String', 'java.lang.String', 'android.content.ContentValues').implementation = function(table, nullColumnHack, values) {
        console.log('[*] SQLiteDatabase.insert called');
        console.log('[*] Table: ' + table);
        console.log('[*] Values: ' + values.toString());
        return this.insert(table, nullColumnHack, values);
    };

    SQLiteDatabase.update.overload('java.lang.String', 'android.content.ContentValues', 'java.lang.String', '[Ljava.lang.String;').implementation = function(table, values, whereClause, whereArgs) {
        console.log('[*] SQLiteDatabase.update called');
        console.log('[*] Table: ' + table);
        console.log('[*] Values: ' + values.toString());
        console.log('[*] Where: ' + whereClause);
        return this.update(table, values, whereClause, whereArgs);
    };

    SQLiteDatabase.execSQL.overload('java.lang.String').implementation = function(sql) {
        console.log('[*] SQLiteDatabase.execSQL called');
        console.log('[*] SQL: ' + sql);
        return this.execSQL(sql);
    };

    SQLiteDatabase.execSQL.overload('java.lang.String', '[Ljava.lang.Object;').implementation = function(sql, bindArgs) {
        console.log('[*] SQLiteDatabase.execSQL with bind args called');
        console.log('[*] SQL: ' + sql);
        console.log('[*] Args: ' + JSON.stringify(bindArgs));
        return this.execSQL(sql, bindArgs);
    };

    // Monitor database reads (optional, but can be useful)
    SQLiteDatabase.query.overload('java.lang.String', '[Ljava.lang.String;', 'java.lang.String', '[Ljava.lang.String;', 'java.lang.String', 'java.lang.String', 'java.lang.String').implementation = function(table, columns, selection, selectionArgs, groupBy, having, orderBy) {
        console.log('[*] SQLiteDatabase.query called');
        console.log('[*] Table: ' + table);
        console.log('[*] Columns: ' + JSON.stringify(columns));
        console.log('[*] Selection: ' + selection);
        return this.query(table, columns, selection, selectionArgs, groupBy, having, orderBy);
    };

    // Monitor database opens
    SQLiteDatabase.openOrCreateDatabase.overload('java.io.File', 'android.database.sqlite.SQLiteDatabase$CursorFactory').implementation = function(file, factory) {
        console.log('[*] SQLiteDatabase opened: ' + file.getAbsolutePath());
        return this.openOrCreateDatabase(file, factory);
    };
});
