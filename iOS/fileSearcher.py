import paramiko
import argparse
import os

def execute_ssh_command(ssh_connection, command):
    stdin, stdout, stderr = ssh_connection.exec_command(command)
    output = stdout.read().decode('utf-8').strip()
    error = stderr.read().decode('utf-8').strip()
    if error:
        print(f"Command error: {error}")
    return output

def get_all_bundle_ids(ssh_connection):
    cmd = """
    find /var/containers/Bundle/Application/ -maxdepth 2 -name '*.app' | awk -F "/" '{print $6 " " substr($0, index($0,$7))}'
    """
    return execute_ssh_command(ssh_connection, cmd).split('\n')[1:]  # Skip the first line as it's the parent directory

def get_app_files(ssh_connection, bundle_id, file_extension=None):
    app_dir = f"/private/var/containers/Bundle/Application/{bundle_id}"
    find_app_folder_cmd = f"find {app_dir} -maxdepth 2 -name '*.app'"
    app_folder = execute_ssh_command(ssh_connection, find_app_folder_cmd)

    if not app_folder:
        print(f"Debug: No .app folder found for bundle ID: {bundle_id}")
        return None, []

    if file_extension:
        find_files_cmd = f"find {app_folder} -name '*.{file_extension}'"
    else:
        find_files_cmd = f"find {app_folder} -regex '.*\(txt\|json\|pdf\|doc\|docx\|ppt\|xls\|xlsx\)$'"
    
    files = execute_ssh_command(ssh_connection, find_files_cmd)

    if not files:
        print(f"Debug: No matching files found in {app_folder}")
        return app_folder, []

    return app_folder, files.split('\n')

def main():
    parser = argparse.ArgumentParser(description='SSH into an iOS device and perform app-related actions.')
    parser.add_argument('-ip', type=str, required=True, help='IP address of the iOS device')
    parser.add_argument('-u', '--username', type=str, required=True, help='Username for SSH connection')
    parser.add_argument('-p', '--password', type=str, required=True, help='Password for SSH connection')
    parser.add_argument('--action', type=str, choices=['bundle-id','inspect-plist', 'inspect-db', 'inspect-sqlite', 'inspect-files'], required=True, help='Actions searches for content in an iOS applicating using a bundleID')
    parser.add_argument('--bundle-id', type=str, help='Bundle ID of the app to inspect (required for inspect actions)')

    args = parser.parse_args()

    ssh_connection = None

    try:
        ssh_connection = paramiko.SSHClient()
        ssh_connection.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_connection.connect(args.ip, username=args.username, password=args.password)
        print(f"Connected to {args.ip}")

        if args.action == 'bundle-id':
            bundle_ids = get_all_bundle_ids(ssh_connection)
            print("\nAvailable Bundle IDs:")
            for bid in bundle_ids:
                print(f"  {bid}")
        
        elif args.action.startswith('inspect-'):
            if not args.bundle_id:
                print(f"Error: --bundle-id is required for the {args.action} action.")
                exit(1)
            
            file_type = args.action.split('-')[1]
            if file_type == 'files':
                app_folder, files = get_app_files(ssh_connection, args.bundle_id)
            else:
                app_folder, files = get_app_files(ssh_connection, args.bundle_id, file_type)

            if app_folder:
                print(f"\nBundle ID: {args.bundle_id}")
                print(f"App Folder: {app_folder}")
                print(f"{'Various' if file_type == 'files' else file_type.upper()} Files:")
                for file in files:
                    print(f"  {file}")
            else:
                print(f"No .app folder found for bundle ID: {args.bundle_id}")

    except paramiko.AuthenticationException:
        print(f"Failed to connect to {args.ip} due to wrong username or password")
        exit(1)
    except paramiko.SSHException as ssh_ex:
        print(f"Unable to establish SSH connection: {ssh_ex}")
        exit(2)
    except Exception as e:
        print(f"An error occurred: {e}")
        import traceback
        traceback.print_exc()
        exit(3)
    finally:
        if ssh_connection:
            ssh_connection.close()

if __name__ == "__main__":
    main()
